{"version":3,"sources":["apiCaller.spec.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;kBAOwB,O;;AAPxB;;;;AACA;;;;AACA;;;;AACA;;;;;;qBAEkB,mB;IAAX,O,kBAAA,O;AAEQ,SAAS,OAAT,CAAiB,QAAjB,EAAiD;AAAA,MAAtB,MAAsB,yDAAb,KAAa;AAAA,MAAN,IAAM;;AAC9D,SAAO,+BAAS,OAAT,SAAoB,QAApB,EAAgC;AACrC,aAAS,EAAE,gBAAgB,kBAAlB,EAD4B;AAErC,kBAFqC;AAGrC,UAAM,yBAAe,IAAf;AAH+B,GAAhC,EAKN,IALM,CAKD;AAAA,WAAY,SAAS,IAAT,GAAgB,IAAhB,CAAqB;AAAA,aAAS,EAAE,UAAF,EAAQ,kBAAR,EAAT;AAAA,KAArB,CAAZ;AAAA,GALC,EAMN,IANM,CAMD,gBAAwB;AAAA,QAArB,IAAqB,QAArB,IAAqB;AAAA,QAAf,QAAe,QAAf,QAAe;;AAC5B,QAAI,CAAC,SAAS,EAAd,EAAkB;AAChB,aAAO,kBAAQ,MAAR,CAAe,IAAf,CAAP;AACD;AACD,WAAO,IAAP;AACD,GAXM,EAYN,IAZM,CAaL;AAAA,WAAY,QAAZ;AAAA,GAbK,EAcL;AAAA,WAAS,KAAT;AAAA,GAdK,CAAP;AAgBD;;AAGD,mBAAK,wBAAL,EAA+B,aAAK;AAClC,MAAI,QAAQ;AACV,aAAU;AADA,GAAZ;AAGD,sBAAK,OAAL,EACM,GADN,CACU,OADV,EAEM,KAFN,CAEY,GAFZ,EAEgB,KAFhB;AAGG,SAAO,QAAQ,MAAR,EAAgB,IAAhB,CAAqB,oBAAY;AAAA;AAAA;;AAChC,MAAE,SAAF,uBAAY,QAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gCAAsB,KAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACN,GAFK,CAAP;AAGH,CAVD;;AAaA,mBAAK,gBAAL,EAAuB,aAAK;AAC1B,MAAM,OAAO,EAAE,IAAI,CAAN,EAAb;AACA,MAAM,QAAQ,EAAE,KAAK,KAAP,EAAd;AACA,sBAAK,OAAL,EACG,IADH,CACQ,MADR,EACgB,IADhB,EAEG,KAFH,CAES,GAFT,EAEc,KAFd;AAGA,SAAO,QAAQ,KAAR,EAAe,MAAf,EAAuB,IAAvB,EAA6B,IAA7B,CAAkC,oBAAY;AAAA;AAAA;;AACnD,MAAE,SAAF,yBAAY,QAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gCAAsB,KAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACD,GAFM,CAAP;AAGD,CATD;;AAWA,mBAAK,mBAAL,EAA0B,aAAK;AAC7B,MAAM,QAAQ,EAAE,SAAS,aAAX,EAAd;AACA,sBAAK,OAAL,EACG,GADH,CACO,aADP,EAEG,KAFH,CAES,GAFT,EAEc,KAFd;AAGA,SAAO,QAAQ,YAAR,EAAsB,IAAtB,CAA2B,iBAAS;AAAA;AAAA;;AACzC,MAAE,SAAF,yBAAY,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gCAAmB,KAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACD,GAFM,CAAP;AAGD,CARD","file":"apiCaller.spec.js","sourcesContent":["import test from 'ava';\nimport nock from 'nock';\nimport fetch from 'isomorphic-fetch';\nimport http from \"http\";\n\nconst {API_URL} = \"http://mytest.com\";\n\nexport default function callApi(endpoint, method = 'get', body) {\n  return fetch(`${API_URL}/${endpoint}`, {\n    headers: { 'content-type': 'application/json' },\n    method,\n    body: JSON.stringify(body),\n  })\n  .then(response => response.json().then(json => ({ json, response })))\n  .then(({ json, response }) => {\n    if (!response.ok) {\n      return Promise.reject(json);\n    }\n    return json;\n  })\n  .then(\n    response => response,\n    error => error\n  );\n}\n\n\ntest('method defaults to GET', t => {\n  var reply = {\n    message : \"hello world\"\n  }\n nock(API_URL)\n      .get(\"/test\")\n      .reply(200,reply);\n    return callApi('test').then(response => {\n            t.deepEqual(response, reply);\n     });\n});\n\n\ntest('sends the body', t => {\n  const body = { id: 5 };\n  const reply = { foo: 'bar' };\n  nock(API_URL)\n    .post('/foo', body)\n    .reply(200, reply);\n  return callApi('foo', 'post', body).then(response => {\n    t.deepEqual(response, reply);\n  });\n});\n\ntest('returns the error', t => {\n  const reply = { message: 'Errrrrrrrrr' };\n  nock(API_URL)\n    .get('/send_error')\n    .reply(500, reply);\n  return callApi('send_error').then(error => {\n    t.deepEqual(error, reply);\n  });\n});\n"]}