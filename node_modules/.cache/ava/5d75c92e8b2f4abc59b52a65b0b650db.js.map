{"version":3,"sources":["apiCaller.spec.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;AACA;;;kBAWwB,O;;AAZxB;;;;AAEA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA;;;AAGA,IAAM,UAAU,uBAAhB;;AAEe,SAAS,OAAT,CAAiB,QAAjB,EAAiD;AAAA,MAAtB,MAAsB,yDAAb,KAAa;AAAA,MAAN,IAAM;;AAC9D,SAAO,+BAAS,OAAT,SAAoB,QAApB,EAAgC;AACrC,aAAS,EAAE,gBAAgB,kBAAlB,EAD4B;AAErC,kBAFqC;AAGrC,UAAM,yBAAe,IAAf;AAH+B,GAAhC,EAKN,IALM,CAKD;AAAA,WAAY,SAAS,IAAT,GAAgB,IAAhB,CAAqB;AAAA,aAAS,EAAE,UAAF,EAAQ,kBAAR,EAAT;AAAA,KAArB,CAAZ;AAAA,GALC,EAMN,IANM,CAMD,gBAAwB;AAAA,QAArB,IAAqB,QAArB,IAAqB;AAAA,QAAf,QAAe,QAAf,QAAe;;AAC5B,QAAI,CAAC,SAAS,EAAd,EAAkB;AAChB,aAAO,kBAAQ,MAAR,CAAe,IAAf,CAAP;AACD;AACD,WAAO,IAAP;AACD,GAXM,EAYN,IAZM,CAaL;AAAA,WAAY,QAAZ;AAAA,GAbK,EAcL;AAAA,WAAS,KAAT;AAAA,GAdK,CAAP;AAgBD;;AAGD,mBAAK,wBAAL,EAA+B,aAAK;AAClC,MAAI,QAAQ;AACV,aAAS;AADC,GAAZ;;AAIA,MAAI,MAAM,oBAAK,uBAAL,EACC,GADD,CACK,QADL,EAEC,KAFD,CAEO,GAFP,EAEW,KAFX,CAAV;;AAIU,SAAO,QAAQ,OAAR,EAAiB,EAAjB,EACN,IADM,CACD,UAAS,IAAT,EAAe;AAAA;AAAA;;AAChB,MAAE,SAAF,uBAAY,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gCAAmB,IAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACJ,GAHM,CAAP;;AAMV;AACA;AACA;AACA;AACA;;AAGD,CAtBD;;AAwBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"apiCaller.spec.js","sourcesContent":["import test from 'ava';\n// import callApi, { API_URL } from '../apiCaller';\nimport nock from 'nock';\nimport fetch from 'isomorphic-fetch';\nimport Config from '.././config';\nimport http from \"http\";\n\n// /src/util/__tests__/apiCaller.spec.js\n\n\nconst API_URL = 'http://localhost:8000';\n\nexport default function callApi(endpoint, method = 'get', body) {\n  return fetch(`${API_URL}/${endpoint}`, {\n    headers: { 'content-type': 'application/json' },\n    method,\n    body: JSON.stringify(body),\n  })\n  .then(response => response.json().then(json => ({ json, response })))\n  .then(({ json, response }) => {\n    if (!response.ok) {\n      return Promise.reject(json);\n    }\n    return json;\n  })\n  .then(\n    response => response,\n    error => error\n  );\n}\n\n\ntest('method defaults to GET', t => {\n  var reply = {\n    message: \"hello world from server\"\n  }\n\n  var api = nock('http://localhost:8000')\n            .get(\"/test/\")\n            .reply(200,reply);\n\n            return callApi('test/', {\n        \t\t}).then(function(data) {\n        \t        t.deepEqual(reply, data);\n        \t   });\n\n\n  //     return http.get(\"http://javascriptplayground.com/test/\", function(resp) {\n  //       resp.on(\"end\", function(data) {\n  //       t.deepEqual(reply, data);\n  //   });\n  // });\n\n\n});\n\n// test('sends the body', t => {\n//   const body = { id: 5 };\n//   const reply = { foo: 'bar' };\n//   nock(API_URL)\n//     .post('/foo', body)\n//     .reply(200, reply);\n//   return callApi('foo', 'post', body).then(response => {\n//     t.deepEqual(response, reply);\n//   });\n// });\n//\n// test('returns the error', t => {\n//   const reply = { message: 'Errrrrrrrrr' };\n//   nock(API_URL)\n//     .get('/send_error')\n//     .reply(500, reply);\n//   return callApi('send_error').then(error => {\n//     t.deepEqual(error, reply);\n//   });\n// });\n"]}