{"version":3,"sources":["apiCaller.spec.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;AACA;;;kBASwB,O;;AAVxB;;;;AAEA;;;;AACA;;;;AACA;;;;;;AACA;;;AAGA,IAAM,UAAU,uBAAhB;;AAEe,SAAS,OAAT,CAAiB,QAAjB,EAAiD;AAAA,MAAtB,MAAsB,yDAAb,KAAa;AAAA,MAAN,IAAM;;AAC9D,SAAO,+BAAS,OAAT,SAAoB,QAApB,EAAgC;AACrC,aAAS,EAAE,gBAAgB,kBAAlB,EAD4B;AAErC,kBAFqC;AAGrC,UAAM,yBAAe,IAAf;AAH+B,GAAhC,EAKN,IALM,CAKD;AAAA,WAAY,SAAS,IAAT,GAAgB,IAAhB,CAAqB;AAAA,aAAS,EAAE,UAAF,EAAQ,kBAAR,EAAT;AAAA,KAArB,CAAZ;AAAA,GALC,EAMN,IANM,CAMD,gBAAwB;AAAA,QAArB,IAAqB,QAArB,IAAqB;AAAA,QAAf,QAAe,QAAf,QAAe;;AAC5B,QAAI,CAAC,SAAS,EAAd,EAAkB;AAChB,aAAO,kBAAQ,MAAR,CAAe,IAAf,CAAP;AACD;AACD,WAAO,IAAP;AACD,GAXM,EAYN,IAZM,CAaL;AAAA,WAAY,QAAZ;AAAA,GAbK,EAcL;AAAA,WAAS,KAAT;AAAA,GAdK,CAAP;AAgBD;;AAED,mBAAK,wBAAL,EAA+B,aAAK;AAClC,sBAAK,uBAAL,EACA,GADA,CACI,aADJ,EAEA,KAFA,CAEM,GAFN,EAEW,yBAFX;;AAIA,SAAO,QAAQ,WAAR,EAAqB,EAArB,EACJ,IADI,CACC,UAAS,MAAT,EAAiB;AAAA;AAAA;;AACtB,MAAE,SAAF,uBAAY,MAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gCAAoB,KAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACF,GAHM,CAAP;AAKD,CAVD;;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"apiCaller.spec.js","sourcesContent":["import test from 'ava';\n// import callApi, { API_URL } from '../apiCaller';\nimport nock from 'nock';\nimport fetch from 'isomorphic-fetch';\nimport Config from '.././config';\n// /src/util/__tests__/apiCaller.spec.js\n\n\nconst API_URL = 'http://localhost:8000';\n\nexport default function callApi(endpoint, method = 'get', body) {\n  return fetch(`${API_URL}/${endpoint}`, {\n    headers: { 'content-type': 'application/json' },\n    method,\n    body: JSON.stringify(body),\n  })\n  .then(response => response.json().then(json => ({ json, response })))\n  .then(({ json, response }) => {\n    if (!response.ok) {\n      return Promise.reject(json);\n    }\n    return json;\n  })\n  .then(\n    response => response,\n    error => error\n  );\n}\n\ntest('method defaults to GET', t => {\n  nock('http://localhost:8000')\n\t.get('/helloTest/')\n\t.reply(200, \"hello world from server\");\n\n  return callApi('helloTest', {\n  }).then(function(result) {\n     t.deepEqual(result, reply);\n  });\n\n});\n\n// test('sends the body', t => {\n//   const body = { id: 5 };\n//   const reply = { foo: 'bar' };\n//   nock(API_URL)\n//     .post('/foo', body)\n//     .reply(200, reply);\n//   return callApi('foo', 'post', body).then(response => {\n//     t.deepEqual(response, reply);\n//   });\n// });\n//\n// test('returns the error', t => {\n//   const reply = { message: 'Errrrrrrrrr' };\n//   nock(API_URL)\n//     .get('/send_error')\n//     .reply(500, reply);\n//   return callApi('send_error').then(error => {\n//     t.deepEqual(error, reply);\n//   });\n// });\n"]}